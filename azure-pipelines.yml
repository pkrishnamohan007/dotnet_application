trigger:
  branches:
    include:
      - main


resources:
  repositories:
    - repository: argocddevopsrepo
      type: git
      ref: main
      endpoint: argocddevopsrepo
      name: argocd/stable_argo_structure


variables:
  - name: artifactName
    value: deployment
  - name: componentName
    value: app1
  - name: gitUserEmailAddress
    value: krishnamohan.p@axiomio.com

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          name: argocd

        variables:
          applicationFolder: $(Build.Repository.LocalPath)/2023-12-aks-argocd-pipeline/Application/app-01
          containerRepository: app-01
          buildConfiguration: "Release"
          deploymentFolder: $(applicationFolder)/deployment/overlays
          outputFolder: $(applicationFolder)/output/

        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '7.x'
          - task: DotNetCoreCLI@2
            displayName: Build & Publish
            inputs:
              command: "publish"
              publishWebProjects: false
              modifyOutputPath: false
              workingDirectory: $(applicationFolder)
              arguments: --output $(outputFolder) -c $(buildConfiguration) --self-contained true
              zipAfterPublish: false

          - task: Docker@2
            displayName: Login to ACR
            inputs:
              containerRegistry: 'argocd_app_acr'
              command: 'login'

          - task: Docker@2
            displayName: Build Docker image
            inputs:
              containerRegistry: 'argocd_app_acr'
              repository: '$(containerRepository)'
              command: 'build'
              Dockerfile: '$(applicationFolder)/Dockerfile'
              buildContext: '$(applicationFolder)'
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: Push Docker image
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              containerRegistry: 'argocd_app_acr'
              repository: '$(containerRepository)'
              command: 'push'
              tags: |
                $(Build.BuildId)
                latest

          - task: CopyFiles@2
            displayName: Copy deployment manifests
            inputs:
              sourceFolder: $(deploymentFolder)
              contents: "**"
              targetFolder: $(Build.ArtifactStagingDirectory)
              overwrite: true
          

          - script: |
              cd $(Build.ArtifactStagingDirectory)
              sed -i 's/__Build.BuildId__/$(Build.BuildId)/g' stage/deployment.yml
              sed -i 's/__Build.BuildId__/$(Build.BuildId)/g' prod/deployment.yml
            displayName: 'Replace __Build.BuildId__ with Build ID'
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: $(artifactName)

  - stage: Staging
    jobs:
      - deployment: Staging

        environment:
          name: aks-staging

        pool:
          name: "argocd"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: argocddevopsrepo
                  persistCredentials: true
                  clean: true

                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: '$(artifactName)'
                    itemPattern: |
                      stage/**
                    targetPath: '$(Build.Repository.LocalPath)/apps/$(componentName)/overlays'

                - task: PowerShell@2
                  displayName: Commit to Deployment repo
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(Build.Repository.LocalPath)
                    script: |
                      git config user.email "$(gitUserEmailAddress)"
                      git config user.name "build"
                      git stash
                      git remote update
                      git fetch
                      git checkout --track origin/main
                      git stash pop
                      git add .
                      git commit -m "$(componentName): staging deployment"
                      git push origin HEAD:main

  - stage: Production
    jobs:
      - deployment: Production

        environment:
          name: aks-production

        pool:
          name: "argocd"

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: argocddevopsrepo
                  persistCredentials: true
                  clean: true

                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: $(artifactName)
                    patterns: |
                      prod/**
                    path: $(Build.Repository.LocalPath)/apps/$(componentName)/overlays

                - task: PowerShell@2
                  displayName: Commit to Deployment repo
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(Build.Repository.LocalPath)
                    script: |
                      git config user.email "$(gitUserEmailAddress)"
                      git config user.name "build"
                      git stash
                      git remote update
                      git pull origin main --rebase
                      git fetch
                      git checkout --track origin/main
                      git stash pop
                      git add .
                      git commit -m "$(componentName): production deployment"
                      git push origin HEAD:main

